// 1. Basic Find Operations

// Find all courses taught by Dr. Smith
db.courses.find({ "InstructorName": "Dr. Smith" })

// Find all Computer Science students
db.students.find({ "Major": "Computer Science" })

// Find all students who got grade 'A'
db.enrollments.find({ "Grade": "A" })

// 2. Aggregation Examples

// Get count of students by major
db.students.aggregate([
  {
    $group: {
      _id: "$Major",
      studentCount: { $sum: 1 }
    }
  }
])

// Calculate average grade distribution per course
db.enrollments.aggregate([
  {
    $group: {
      _id: "$CourseID",
      averageGrade: { 
        $avg: {
          $switch: {
            branches: [
              { case: { $eq: ["$Grade", "A"] }, then: 4.0 },
              { case: { $eq: ["$Grade", "B"] }, then: 3.0 },
              { case: { $eq: ["$Grade", "C"] }, then: 2.0 }
            ],
            default: 0
          }
        }
      }
    }
  }
])

// 3. Lookup (Join) Operations

// Get all enrollments with student details
db.enrollments.aggregate([
  {
    $lookup: {
      from: "students",
      localField: "StudentID",
      foreignField: "StudentID",
      as: "studentDetails"
    }
  }
])

// Get all courses with their enrollment counts
db.courses.aggregate([
  {
    $lookup: {
      from: "enrollments",
      localField: "CourseID",
      foreignField: "CourseID",
      as: "enrollments"
    }
  },
  {
    $project: {
      CourseName: 1,
      InstructorName: 1,
      enrollmentCount: { $size: "$enrollments" }
    }
  }
])

// 4. Complex Queries

// Find students with their enrolled courses and grades
db.students.aggregate([
  {
    $lookup: {
      from: "enrollments",
      localField: "StudentID",
      foreignField: "StudentID",
      as: "enrollments"
    }
  },
  {
    $lookup: {
      from: "courses",
      localField: "enrollments.CourseID",
      foreignField: "CourseID",
      as: "courseDetails"
    }
  },
  {
    $project: {
      FirstName: 1,
      LastName: 1,
      Major: 1,
      "enrollments.Grade": 1,
      "courseDetails.CourseName": 1
    }
  }
])

// 5. Update Operations

// Update a student's advisor
db.students.updateOne(
  { "StudentID": 1 },
  { $set: { "AdvisorName": "Dr. White", "AdvisorID": 4 } }
)

// 6. Find students who are taking courses with their advisor as instructor
db.students.aggregate([
  {
    $lookup: {
      from: "enrollments",
      localField: "StudentID",
      foreignField: "StudentID",
      as: "enrollments"
    }
  },
  {
    $lookup: {
      from: "courses",
      localField: "enrollments.CourseID",
      foreignField: "CourseID",
      as: "courses"
    }
  },
  {
    $match: {
      $expr: {
        $in: ["$AdvisorName", "$courses.InstructorName"]
      }
    }
  },
  {
    $project: {
      FirstName: 1,
      LastName: 1,
      AdvisorName: 1
    }
  }
])


curl -X POST \
  http://127.0.0.1:5000/api/query \
  -H 'Content-Type: application/json' \
  -d '{
    "query": "db.students.aggregate([{ \"$group\": { \"_id\": \"$Major\", \"studentCount\": { \"$sum\": 1 } } }])"
  }'